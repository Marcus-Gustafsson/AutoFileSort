name: CI (UV, multi-OS)

on:
  # push:
  #   branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  checks:
    # Run on both Linux and Windows to catch OS-specific issues.
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python: ["3.12"]
    runs-on: ${{ matrix.os }}

    steps:
      # 1) Get your repository code
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      # 2) Install the selected Python version (same across OSes)
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      # 3) Install UV (fast package manager) and put it on PATH
      # --- Install UV on Linux/macOS (bash shell) ---
      - name: 📦 Install UV (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          # Add to PATH for subsequent steps:
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      # --- Install UV on Windows (PowerShell shell) ---
      - name: 📦 Install UV (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # The sh installer still works on Windows runners, but we'll just use it and then fix PATH.
          curl -LsSf https://astral.sh/uv/install.sh | sh
          # Add to PATH for subsequent steps (PowerShell syntax):
          "$env:USERPROFILE\.local\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append


      # 4) Create virtualenv and install dependencies
      #    Note: We use platform markers in pyproject.toml, so Ubuntu will skip win11toast.
      #    --dev installs dev dependencies (ruff, black, mypy, etc).
      #    Consider adding --frozen after you commit uv.lock to enforce exact versions.
      #    With "--frozen" = You want to guarantee reproducibility — exact same deps as when you last ran uv sync locally.
      - name: 🧪 Create venv & install deps (UV)
        run: uv sync --dev
        # run: uv sync --dev --frozen  # ⬅ after committing uv.lock

      # 5) Lint (fast)
      - name: 🧹 Lint (ruff)
        run: |
          uv run ruff check .
          uv run ruff check --select D .

      # 6) Format check (non-destructive)
      - name: 🎨 Format check (black)
        run: uv run black --check .

      # 7) Type check (static typing)
      - name: 🔎 Type check (mypy)
        run: uv run mypy .

      # Optional extras you can enable later:
      # - name: ✅ Tests (pytest)
      #   run: uv run pytest -q
      #
      # - name: 🛡️ Security (bandit)
      #   run: uv run bandit -q -r .
      #
      # - name: 🔍 Dependency vulnerabilities (pip-audit)
      #   run: uv run pip-audit
